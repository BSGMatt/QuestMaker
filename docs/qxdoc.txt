This text file is for documenting the the QX language.
Variables:
    There are four supported variable types:
    int - Integers, like 1 or -7
    str - Strings, like "Hello"
    bool - Boolean, i.e. TRUE or FALSE
    struct - special types that store multiple values in a single variable. 

    Variables are defined like this:
        [varType] [varName] = [value];
    Examples:
        int favoriteLetter = 1;
        str msg = "Monosodium Glutamate.";
        bool amICool = FALSE;

    Once defined, variables can be referenced by typing a '$' sign in
    front of it, like this:
        $[varName]

    Structure Types:
        Structure Types, or simply structs, are a special kind of variable.
        Rather than having a single value, A struct can hold different variables within it.

        Structs are defined like this:

        struct [name]:
            [varType1] [varName1];
            [varType2] [varName2];
            ...
        end struct;

        Structs can then be defined like traditional variables, for example:

        role merchant = {};
        
        The code above will set 'merchant' to an empty struct of type 'role'.
        Empty structs will use the default values for integers, strings, and booleans.

        In General, structs can be initialized like this:

            For a structure type defined as this:

            struct [structName]:
                [varType1] [varName1];
                [varType2] [varName2];
                ...
            end struct;

            A value is initialized like this:

            [structName] [name] = {[varName1] = [value], [varName2] = [value], ...};

            An alternate way of initializing a struct is like this: 
            [structName] [name] = {[value], [value], ...};

            This will assign the given values based on the order of variables defined within the struct. 
            So, the first value will be assigned to varName1, the second to varName2, and so on. 


Functions:
    ARM:
        Does basic arithmetic on SrcA and SrcB and stores the result into Dest.
        Usage: 
            ARM([Operation], [Dest], [SrcA], [SrcB]);
            [Operation] The arithmetic operation to perform. 
            Supported operations include:
                ADD: Addition
                SUB: Substraction
                MUL: Multiplication
                DIV: Integer Division
            [Dest] The variable that will be store the result. If the variable has not been previously defined, 
            then behavior is undefined. 
            [SrcA] The first operand.
            [SrcB] The second operand.
        Alternate Usage:
            In addtion to the traditional syntax, the ARM function can be called
            like this:
            [Dest] = [SrcA] [Operation] [SrcB];
            Note that [Operation] uses the traditional symbols (i.e, +, -, *) 
            instead of the string constants like with standard usage.
        Example:
            ARM(ADD, $var, 2, 2); OR $var = 2 + 2;
            Will store the result of 2 + 2 in var. 
        
    DISP:
        Writes the given text to the output console. 
        Usage:
            DISP([TEXT]);
            [TEXT] - The text to display. 
        Variables can be embedded into the string using the '$' symbol.
        Examples:
            DISP("Hello World!");
            Will write "Hello World!" to the output console. 

            DISP("You see $NUM doors in front of you. What do you do?");
            Will write "You see $NUM doors in front of you. What do you do?", but 
            will replace $NUM with the value store in the variable "NUM". So if the value of 
            num was 3, then the output would be:
                "You see 3 doors in front of you. What do you do?"

    PROMPT:
        Prompts the user for input, and stores that input into the given variable.
        Usage:
            PROMPT([VAR], [MESSAGE]);
            [VAR] - The variable that will store the user input.
            [MESSAGE] - The message that will display before reading input. 

            if [VAR] does not contain a '$' sign (i.e, is not a reference), then a new variable 
            will be created. 

    JUMP:
        Jumps to the given label.
        Usage:
            JUMP([Label]);
            [Label] - The name of the given label. 
    JUMPIF:
        Jumps to the given label when the given condition is true.
        Usage:
            JUMPIF([Label], [Compare], [ValueA], [ValueB])
            [Label] - The name of label to jump to.
            [Compare] - The type of comparision to make.
            [Compare] can be the following values:
                EQ - Equal to
                LT - Less than
                GT - Greater than
                LE - Less than or equal to
                GE - Greater than or equal to
                NE - Not Equal to 
        Alternate Usage:
            JUMPIF([Label], [Comparision]);
            [Label] - The name of the label to jump to.
            [Comparision] - The comparision to check, written in the form:
                [ValueA] [ComparisionSymbol] [ValueB]
        Example:
            JUMPIF(END_GAME, LT, $A, $B); OR JUMPIF(END_GAME, $A < $B);
            Will jump to END_GAME if the value stored at A is less than the value stored in B. 

    END:
        Sets the 'END' flag to true.
        Usage:
            END();

    WAIT:
        Halts the program for a given number of cycles.
        Usage:
            WAIT([Cycles]);
            [Cycles] - The number of cycles to halt the program for. 

    NOP:
        No operation. 
        Usage:
            NOP();