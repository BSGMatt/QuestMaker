Here is a text file for listing any ideas regarding the map parser. 

Variables are initialized like this:
#VALUE_TYPE[Some Whitespace]VAR_NAME[Some Whitespace Again]VALUE
    Examples:
        #INT NUM_ITEMS 4
        #STR OK_MESSAGE "You got the ok!"
        #BOOL HAS_OK FALSE
    Notice that there are different value types. For now, we'll worry about three:
        Integers: Signified by #INT. Represent integer values
        Strings: Signified by #STR. Represent string (Notice the quotation marks; they are important to determining what's a string.)
        Boolean: Signified by #BOOL. Represents boolean values, TRUE or FALSE. 
Variables are referenced like this:
$VAR_NAME
    Example:
        #STR MYNAME "Dennis"
        #STR THEIR_NAME "Donny"
        [DISP_TEXT:"$THEIR_NAME","Hello, $MYNAME"]
The value of variables can be changed like this:
$VAR_NAME=VALUE
    Examples:
        #INT LOOP_COUNT 10
        !START_LOOP
            [JUMPIF:$LOOP_COUNT<1,END_LOOP]
            [DISP_TEXT:"","READY IN $LOOP_COUNT"]
            $LOOP_COUNT=$LOOP_COUNT-1
            [JUMP:START_LOOP]
        !END_LOOP
            [DISP_TEXT:"","Done!"]


Actions are called like this:
[ACTION_NAME:ARG0,ARG1,ARG2,ARG3,...ARGN]
    Examples:
        [DISP_TEXT:SPEAKER_NAME,TEXT]
        [PROMPT:MESSAGE,OPTION_0:ACTION_0,OPTION_1:ACTION_0,...,OPTION_K:ACTION_K]
        [JUMP:LABEL]
        [JUMPIF:CONDITION,LABEL]
        [STEP:NUM_COMMANDS]
    These actions are what we will implement for now. 

Labels are defined like this:
!LABEL_NAME
    Labels will be used like this:
    !LIKES_APPLES
        [DISP_TEXT:"JOHN", "I like apples, too!"]
    !DOESNT_LIKE_APPLES
        [DISP_TEXT:"JOHN", "Well I don't like you!"]
    [PROMPT:"Do you like apples?","Yes.":[JUMP:LIKES_APPLES],"No.":[JUMP:DOESNT_LIKE_APPLES]]


Note 1/29/2023:
I changed the format for the quest language, to look more like standard programming languages like Java or C.
Example:
int    int_test = 10;
str stringTest="This is a string.";
    bool boolTest=TRUE;
        int moreTesting=-1;


str speakerName="Ronny";
str playerName="Johnny";

#TEST_LABEL
    DISP_TEXT("$speakerName", "Hello, $playerName! I'm $speakerName");
    ARM(ADD, $speakerName, $speakerName, 74);
    $speakerName = $speakerName + 74;

int testingone= 10;

For arithmitic code like line 67, I plan to have the instruction be interpreted as ARM() function with the 
regular function syntax.

In other words, This:
$speakerName = $speakerName + 74;
Will become this:
ARM(ADD, $speakerName, $speakerName, 74);


Note 5/13/23:

I noticed that any text after a semicolon is ignored, so I'm using semicolons
as a way to create comments in code. 

Also, I plan on doing something like this for structure types:

#DEF_STRUCTS:

    ;Code below defines a struct

    struct role:
        str name;
        int hunt;
        int endurance;
        int bargaining;
    end struct;



    ;This code defines how a struct would be defined as a variable.

    struct player:
        string name;
        role pRole;
        int hp;
        int mp;
        int money;
    end struct;

    ;Structs would be initialized like this: 

    role commoner = {}; For empty structs;

    ;For initializing specific fields, they can be like this:
    role merchant = {name = "Merchant", hunt = 25}; 

    ;Otherwise, fields are initialized in the same order that they're defined.
    role hunter = {"Hunter", 75, 50, 25}; 

    ;The above code is the same as:
    role hunter = {name = "Hunter", hunt = 75, endurance = 50, bargaining = 25}; 
    

struct arr_int:
    int n;
    int [0];
end struct;

struct     



